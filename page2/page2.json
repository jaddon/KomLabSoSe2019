{   
    "nodes" : [
        { "id": 0, "text": "program", "x": 400, "y": 70,  "reflexive": true },
        { "id": 1, "text": "statement", "x": 400, "y": 140,  "reflexive": true },
        { "id": 2, "text": "conditional statement","x": 200, "y": 160,  "reflexive": true },
        { "id": 3, "text": "chaining", "x": 100, "y": 140,  "reflexive": true },
        { "id": 4, "text": "nesting", "x": 70, "y": 180,  "reflexive": true },
        { "id": 5, "text": "relational operator", "x": 150, "y": 220,  "reflexive": true },
        { "id": 6, "text": "logical operator", "x": 250, "y": 220,  "reflexive": true },
        { "id": 7, "text": "assignment", "x": 310, "y": 200,  "reflexive": true },
        { "id": 8, "text": "declaration", "x": 400, "y": 200,  "reflexive": true },
        { "id": 9, "text": "initialization", "x": 490, "y": 200,  "reflexive": true },
        { "id": 10, "text": "print statement", "x": 620, "y": 200,  "reflexive": true },
        { "id": 11, "text": "input", "x": 520, "y": 300,  "reflexive": false },
        { "id": 12, "text": "output", "x": 590, "y": 300,  "reflexive": false },
        { "id": 13, "text": "Scanner class", "x": 450, "y": 380,  "reflexive": false },
        { "id": 14, "text": "System class", "x": 590, "y": 380,  "reflexive": false },
        { "id": 15, "text": "loop", "x": 280, "y": 330,  "reflexive": false },
        { "id": 16, "text": "loop body", "x": 180, "y": 360,  "reflexive": false },
        { "id": 17, "text": "loop variable", "x": 240, "y": 380,  "reflexive": false },
        { "id": 18, "text": "increment loop", "x": 290, "y": 420,  "reflexive": false },
        { "id": 19, "text": "pretest loop", "x": 360, "y": 420,  "reflexive": false },
        { "id": 20, "text": "posttest loop", "x": 430, "y": 420,  "reflexive": false }
    ],

    "nodesNextMap" : [
    { "id": 0, "text": "value", "x": 870, "y": 100, "reflexive": false },
    { "id": 1, "text": "variable", "x": 1130, "y": 300, "reflexive": false },
    { "id": 2, "text": "constant", "x": 930, "y": 300, "reflexive": false },
    { "id": 3, "text": "instance variable", "x": 980, "y": 380, "reflexive": false },
    { "id": 4, "text": "local variable", "x": 1100, "y": 380, "reflexive": false },
    { "id": 5, "text": "class variable", "x": 1200, "y": 380, "reflexive": false }
    
  ],

    "linkwords" : [

     {"id": 0,  "text" : "has", "x": 400, "y": 100 },
     {"id": 1,  "text" : "put", "x": 350, "y": 100 },
     {"id": 2,  "text" : "has type", "x": 400, "y": 165 },
     {"id": 3,  "text" : "has", "x": 150, "y": 150 },
     {"id": 4,  "text" : "may use", "x": 135, "y": 170 },
     {"id": 5,  "text" : "can have", "x": 210, "y": 190 },
     {"id": 6,  "text" : "put first", "x": 480, "y": 140 },
     {"id": 7,  "text" : "has", "x": 550, "y": 160 },
     {"id": 8,  "text" : "create", "x": 680, "y": 160 },
     {"id": 9,  "text" : "shows", "x": 605, "y": 250 },
     {"id": 10,  "text" : "by", "x": 510, "y": 340 },
     {"id": 11,  "text" : "by", "x": 590, "y": 340 },
     {"id": 12,  "text" : "contains", "x": 230, "y": 345 },
     {"id": 13,  "text" : "has type", "x": 300, "y": 380 },
     {"id": 14,  "text" : "can be repeated in", "x": 330, "y": 270 },
     {"id": 15,  "text" : "into", "x": 950, "y": 160 },
     {"id": 16,  "text" : "declared with final type", "x": 1025, "y": 300 },
     {"id": 17,  "text" : "has type", "x": 1100, "y": 340 }
    ],

    "links" : [
    { "source": "nodes[0]", "target": "linkwords[0]"},
    { "source": "nodes[0]", "target": "linkwords[7]"},
    { "source": "linkwords[0]", "target": "nodes[1]"},
    { "source": "nodes[1]", "target": "linkwords[2]"},
    { "source": "linkwords[2]", "target": "nodes[7]"},
    { "source": "linkwords[2]", "target": "nodes[8]"},
    { "source": "linkwords[2]", "target": "nodes[9]"},
    { "source": "linkwords[2]", "target": "nodes[10]"},
    { "source": "nodes[2]", "target": "linkwords[3]"},
    { "source": "nodes[2]", "target": "linkwords[4]"},
    { "source": "nodes[2]", "target": "linkwords[5]"},
    { "source": "linkwords[3]", "target": "nodes[3]"},
    { "source": "linkwords[4]", "target": "nodes[4]"},
    { "source": "linkwords[5]", "target": "nodes[5]"},
    { "source": "linkwords[5]", "target": "nodes[6]"},
    { "source": "nodes[7]", "target": "linkwords[1]"},
    { "source": "nodes[8]", "target": "linkwords[6]"},
    { "source": "nodes[9]", "target": "linkwords[8]"},
    { "source": "linkwords[7]", "target": "nodes[11]"},
    { "source": "linkwords[7]", "target": "nodes[12]"},
    { "source": "nodes[12]", "target": "linkwords[9]"},
    { "source": "linkwords[9]", "target": "nodes[10]"},
    { "source": "nodes[11]", "target": "linkwords[10]"},
    { "source": "linkwords[10]", "target": "nodes[13]"},
    { "source": "nodes[12]", "target": "linkwords[11]"},
    { "source": "linkwords[11]", "target": "nodes[14]"},
    { "source": "nodes[1]", "target": "linkwords[14]"},
    { "source": "linkwords[14]", "target": "nodes[15]"},
    { "source": "nodes[15]", "target": "linkwords[12]"},
    { "source": "nodes[15]", "target": "linkwords[13]"},
    { "source": "linkwords[12]", "target": "nodes[16]"},
    { "source": "linkwords[12]", "target": "nodes[17]"},
    { "source": "linkwords[13]", "target": "nodes[18]"},
    { "source": "linkwords[13]", "target": "nodes[19]"},
    { "source": "linkwords[13]", "target": "nodes[20]"},

    { "source": "linkwords[1]", "target": "nodesNextMap[0]"},
    { "source": "linkwords[6]", "target": "nodesNextMap[0]"},
    { "source": "linkwords[8]", "target": "nodesNextMap[1]"},
    { "source": "nodesNextMap[0]", "target": "linkwords[15]"},
    { "source": "linkwords[15]", "target": "nodesNextMap[1]"},
    { "source": "nodesNextMap[1]", "target": "linkwords[16]"},
    { "source": "linkwords[16]", "target": "nodesNextMap[2]"},
    { "source": "nodesNextMap[1]", "target": "linkwords[17]"},
    { "source": "linkwords[17]", "target": "nodesNextMap[3]"},
    { "source": "linkwords[17]", "target": "nodesNextMap[4]"},
    { "source": "linkwords[17]", "target": "nodesNextMap[5]"}
      ],

    "glossaries" : [
    { "target": "nodes[0]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[1]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[2]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[3]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[4]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[5]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[6]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[7]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[8]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[9]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[10]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[11]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[12]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[13]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[14]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[15]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[16]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[17]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[18]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[19]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodes[20]", "hidden": true, "width": 60, "height": 80},

    { "target": "nodesNextMap[0]", "hidden": true, "width": 60, "height": 80},
    { "target": "nodesNextMap[1]", "hidden": true, "width": 60, "height": 80}
  ],

  "gTexts" : [
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[0]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[1]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[2]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[3]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[4]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[5]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[6]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[7]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[8]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[9]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[10]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[11]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[12]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[13]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[14]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[15]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[16]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[17]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[18]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[19]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodes[20]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodesNextMap[0]", "hidden": true},
    {"text": "this is only a text for test, later we will put the glossary here. For now the width will be adjusted automatically according to the size of rectangular.", "target": "nodesNextMap[1]", "hidden": true}
  ]
}